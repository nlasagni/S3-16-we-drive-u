package com.wedriveu.shared.rabbitmq.communication;

import com.wedriveu.shared.rabbitmq.communication.config.RabbitMqCommunicationConfig;
import com.wedriveu.shared.rabbitmq.communication.config.RabbitMqQueueConfig;
import com.wedriveu.shared.rabbitmq.communication.strategy.RabbitMqCloseCommunicationStrategy;
import com.wedriveu.shared.rabbitmq.communication.strategy.RabbitMqConsumerStrategy;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

/**
 * The manager of a {@linkplain RabbitMqCommunication}.
 *
 * @author Nicola Lasagni on 09/08/2017.
 */
public interface RabbitMqCommunicationManager {

    /**
     * Sets up a {@linkplain RabbitMqCommunication}.
     *
     * @param config the config
     * @throws IOException      the io exception
     * @throws TimeoutException the timeout exception
     */
    void setUpCommunication(RabbitMqCommunicationConfig config) throws IOException, TimeoutException;

    /**
     * Adds an auto generated queue to RabbitMQ.
     *
     * @return the string
     * @throws IllegalStateException the illegal state exception
     * @throws IOException           the io exception
     */
    String addAutoGeneratedQueue() throws IllegalStateException, IOException;

    /**
     * Adds a queue to RabbitMQ by using the {@linkplain RabbitMqQueueConfig} parameters.
     *
     * @param config the {@linkplain RabbitMqQueueConfig} with which create the queue
     * @throws IOException if something goes wrong during the queue creation
     */
    void addQueue(RabbitMqQueueConfig config) throws IOException;

    /**
     * Publish a message of type {@linkplain T} to the specified {@code exchange} and {@code routingKey}.
     *
     * @param <T>        the message type
     * @param exchange   the exchange
     * @param routingKey the routing key
     * @param message    the message
     * @throws IOException if something goes wrong during message publishing
     */
    <T> void publishMessage(String exchange, String routingKey, T message) throws IOException;

    /**
     * Registers a consumer of messages that are sent to the queue
     * specified in {@linkplain RabbitMqConsumerStrategy#configureQueue(RabbitMqCommunication)}.
     *
     * @param <T>          the type parameter
     * @param strategy     the strategy
     * @param messageClass the message class
     * @throws IOException the io exception
     */
    <T> void registerConsumer(RabbitMqConsumerStrategy<T> strategy, Class<T> messageClass) throws IOException;


    /**
     * Subscribes a consumer of messages that are sent to the queue
     * specified in {@linkplain RabbitMqConsumerStrategy#configureQueue(RabbitMqCommunication)}.
     *
     * @param <T>          the type parameter
     * @param strategy     the strategy
     * @param messageClass the message class
     * @throws IOException the io exception
     */
    <T> int subscribeConsumer(RabbitMqConsumerStrategy<T> strategy, Class<T> messageClass) throws IOException;

    /**
     *
     * @param subscriberId
     * @throws IOException
     */
    void unsubscribeConsumer(int subscriberId) throws IOException;

    /**
     * Close the {@linkplain RabbitMqCommunication}.
     * For additional behaviour provide a {@linkplain RabbitMqCloseCommunicationStrategy}.
     *
     * @param strategy the strategy used for additional closing operations
     * @throws IOException      if something goes wrong during the communication closing
     * @throws TimeoutException if something goes wrong during the communication closing
     */
    void closeCommunication(RabbitMqCloseCommunicationStrategy strategy) throws IOException, TimeoutException;

}
