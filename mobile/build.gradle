buildscript {

    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidGradleVersion}"
    }

}

apply plugin: 'com.android.application'

android {

    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion "${androidBuilToolVersion}"

    defaultConfig {
        applicationId "${androidApplicationId}"
        minSdkVersion "${androidMinSdkVersion}"
        targetSdkVersion "${androidTargerSdkVersion}"
        versionCode androidVersionCode.toInteger()
        versionName "${androidVersionName}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    packagingOptions {
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    //Libraries
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //Tests
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$junitVersion"
    //Android Support
    compile "com.android.support:appcompat-v7:${androidSupportLibrarylVersion}"
    compile "com.android.support:support-v4:${androidSupportLibrarylVersion}"
    //Location
    compile 'com.google.android.gms:play-services-location:11.0.2'
    compile 'com.google.android.gms:play-services-places:11.0.2'
    //Other
    //Other
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile 'com.squareup.retrofit2:converter-jackson:2.3.0'
    compile 'javax.inject:javax.inject:1'
}

task ("javadoc", type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = new File("$docsFolderJava")
    failOnError false
}

def archiveBuildTypes = ["release", "debug"];
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if (variant.buildType.name in archiveBuildTypes) {
            output.outputFile = new File("${releasesClientFolder}/${rootProject.name}-${archivesBaseName}-${variant.buildType.name}-${androidVersionName}.apk")
        }
    }
}