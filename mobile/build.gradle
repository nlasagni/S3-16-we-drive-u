buildscript {

    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidGradleVersion}"
    }

}

apply plugin: 'com.android.application'

android {

    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion "${androidBuilToolVersion}"

    defaultConfig {
        applicationId "${androidApplicationId}"
        minSdkVersion "${androidMinSdkVersion}"
        targetSdkVersion "${androidTargerSdkVersion}"
        versionCode androidVersionCode.toInteger()
        versionName "${androidVersionName}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    packagingOptions {
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility jdk7Version
        targetCompatibility jdk7Version
    }
}

dependencies {
    //Libraries
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //Tests
    androidTestCompile("com.android.support.test.espresso:espresso-core:$androidTestEspressoVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile "junit:junit:$junitVersion"
    //Android Support
    compile "com.android.support:appcompat-v7:$androidSupportLibrarylVersion"
    compile "com.android.support:support-v4:$androidSupportLibrarylVersion"
    //Location
    compile "com.google.android.gms:play-services-location:$androidPlayServicesVersion"
    compile "com.google.android.gms:play-services-places:$androidPlayServicesVersion"
    //Other
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-jackson:$jacksonConverterVersion"
    compile "com.github.bumptech.glide:glide:$androidGlideVersion"
    compile "com.rabbitmq:amqp-client:$rabbitMQVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile project(path: ':shared')
}

task ("javadoc", type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = new File("$docsFolderJava")
    failOnError false
}

def archiveBuildTypes = ["release", "debug"]
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if (variant.buildType.name in archiveBuildTypes) {
            def apkFileName = "${archivesBaseName}-${variant.buildType.name}-${rootProject.version}.apk"
            def apk = output.outputFile
            output.outputFile = new File(apk.parentFile, apkFileName)
        }
    }
}