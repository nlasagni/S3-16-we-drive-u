package com.wedriveu.mobile.service.login;

import android.os.AsyncTask;
import android.os.Message;
import android.util.Log;
import com.rabbitmq.client.ExceptionHandler;
import com.wedriveu.mobile.model.User;
import com.wedriveu.mobile.service.ServiceExceptionHandler;
import com.wedriveu.mobile.service.ServiceOperationHandler;
import com.wedriveu.mobile.service.ServiceResult;
import com.wedriveu.shared.rabbitmq.communication.DefaultRabbitMqCommunicationManager;
import com.wedriveu.shared.rabbitmq.communication.RabbitMqCommunicationManager;
import com.wedriveu.shared.rabbitmq.communication.config.RabbitMqCommunicationConfig;
import com.wedriveu.shared.rabbitmq.communication.strategy.RabbitMqCloseCommunicationStrategy;
import com.wedriveu.shared.rabbitmq.communication.strategy.RabbitMqConsumerStrategy;
import com.wedriveu.shared.rabbitmq.message.LoginRequest;
import com.wedriveu.shared.rabbitmq.message.LoginResponse;
import com.wedriveu.shared.util.Constants;

import java.io.IOException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import static com.wedriveu.mobile.util.Constants.CLOSE_COMMUNICATION_ERROR;
import static com.wedriveu.mobile.util.Constants.NO_RESPONSE_DATA_ERROR;

/**
 * The effective {@linkplain LoginService} implementation
 *
 * @author Marco Baldassarri
 * @author Nicola Lasagni
 */
public class LoginServiceImpl implements LoginService {

    private static final String TAG = LoginServiceImpl.class.getSimpleName();
    private static final String LOGIN_ERROR = "Error occurred while performing login operation.";

    private RabbitMqCommunicationManager mCommunicationManager;

    /**
     * Instantiates a new LoginService.
     */
    public LoginServiceImpl() {
        mCommunicationManager = new DefaultRabbitMqCommunicationManager();
    }

    @Override
    public <T> void login(final String username,
                          final String password,
                          final ServiceOperationHandler<T, User> handler) {
        new AsyncTask<Void, Void, Void>() {

            @Override
            protected Void doInBackground(Void... voids) {
                ServiceResult<User> result;
                try {
                    ExceptionHandler exceptionHandler = new ServiceExceptionHandler();
                    RabbitMqCommunicationConfig config =
                            new RabbitMqCommunicationConfig.Builder()
                                    .host(Constants.RabbitMQ.Broker.HOST)
                                    .password(Constants.RabbitMQ.Broker.PASSWORD)
                                    .exceptionHandler(exceptionHandler).build();
                    mCommunicationManager.setUpCommunication(config);
                    String requestId = mCommunicationManager.addAutoGeneratedQueue();
                    LoginRequest request = createRequest(requestId, username, password);
                    sendRequest(request);
                    final BlockingQueue<LoginResponse> response = new ArrayBlockingQueue<>(1);
                    LoginResponse responseBody = subscribeForResponse(requestId, response);
                    result = createServiceResult(responseBody, password);
                    closeCommunication(requestId);
                } catch (IOException | TimeoutException | InterruptedException e) {
                    Log.e(TAG, LOGIN_ERROR, e);
                    result = new ServiceResult<>(null, LOGIN_ERROR);
                }
                Message message = handler.obtainMessage();
                message.obj = result;
                handler.sendMessage(message);
                return null;
            }


        }.execute();
    }

    private void closeCommunication(String requestId) {
        try {
            RabbitMqCloseCommunicationStrategy strategy = new LoginCloseCommunicationStrategy(requestId);
            mCommunicationManager.closeCommunication(strategy);
        } catch (IOException | TimeoutException e) {
            Log.e(TAG, CLOSE_COMMUNICATION_ERROR, e);
        }
    }

    private LoginRequest createRequest(String requestId, String username, String password) {
        LoginRequest request = new LoginRequest();
        request.setRequestId(requestId);
        request.setUsername(username);
        request.setPassword(password);
        return request;
    }

    private void sendRequest(LoginRequest request) throws IOException {
        mCommunicationManager.publishMessage(Constants.RabbitMQ.Exchanges.USER,
                Constants.RabbitMQ.RoutingKey.LOGIN,
                request);
    }

    private LoginResponse subscribeForResponse(String requestId, BlockingQueue<LoginResponse> responseBlockingQueue)
            throws IOException, InterruptedException {
        RabbitMqConsumerStrategy<LoginResponse> strategy = new LoginSynchronousConsumerStrategy(requestId, responseBlockingQueue);
        mCommunicationManager.registerConsumer(strategy, LoginResponse.class);
        return responseBlockingQueue.poll(com.wedriveu.mobile.util.Constants.SERVICE_OPERATION_TIMEOUT,
                TimeUnit.MILLISECONDS);
    }

    private ServiceResult<User> createServiceResult(LoginResponse response, String password) throws IOException {
        User user = null;
        String error = "";
        if (response == null) {
            error = NO_RESPONSE_DATA_ERROR;
        } else if (response.isSuccess()) {
            user = new User(response.getUserId(), password);
        } else {
            error = response.getErrorMessage();
        }
        return new ServiceResult<>(user, error);
    }

}
